$$NAME = __FILE__:match("/?(.-)$"):gsub("%.", "_")$$
#ifndef _$$NAME$$_
#define _$$NAME$$_

#include <cpprest/json.h>

#include <disccord/types.hpp>
#include <disccord/util/optional.hpp>

/*
NOTE: this code is generated by a tool (generate_models.lua)
Please make changes in $$__FILE__$$ to update this file.
*/

$$
local function generate_encode_body(model)
    local result = {"std::vector<std::pair<std::string, web::json::value>> info;"}

    for _, member in ipairs(model.members) do
        if member.type == "property" then
            if member.prop_type:find("util::optional") then
                result[#result+1] = ("info.push_back(std::make_pair(\"%s\", %s.get_json()));"):format(member.name, member.name)
            else
                result[#result+1] = ("info.push_back(std::make_pair(\"%s\", web::json::value(%s)));"):format(member.name, member.name)
            end
        end
    end

    result[#result+1] = "return web::json::value::object(info);"
    return table.concat(result, "\n")
end
local function generate_decode_body(model)
    local function get_decoder(member)
        if member.prop_type:find("std::string") then
            return "field.as_string()";
        elseif member.prop_type:find("snowflake") then
            return "field.as_number().to_uint64()"
        elseif member.prop_type:find("discriminator") then
            return ("static_cast<%s>(field.as_number().to_uint32())"):format(member.prop_type)
        elseif member.prop_type:find("bool") then
            return "field.as_bool()"
        end
    end

    local result = {}

    for _, member in ipairs(model.members) do
        if member.type == "property" then
            if member.prop_type:find("util::optional") then
                result[#result+1] = ([[
if (!json.has_field("%s"))
    %s = disccord::util::optional<%s::value_type>();
if (json.at("%s").is_null())
    %s = disccord::util::optional<%s::value_type>::no_value();
else
{
    auto field = json.at("%s");
    %s = disccord::util::optional<%s::value_type>(%s);
}]]):format(member.name, member.name, member.prop_type, member.name, member.name, member.prop_type, member.name, member.name, member.prop_type, get_decoder(member))
            else
                result[#result+1] = ([[
{
    auto field = json.at("%s");
    %s = %s;
}]]):format(member.name, member.name, get_decoder(member))
            end
        end
    end

    return table.concat(result, "\n")
end
for i = 1, #__MODELS__ do
    local model = __MODELS__[i]
    model.members[#model.members+1] = {
        type = "method",
        name = "encode",
        return_type = "web::json::value",
        body = generate_encode_body(model),
        params = {}
    }
    model.members[#model.members+1] = {
        type = "method",
        name = "decode",
        return_type = "void",
        body = generate_decode_body(model),
        params = {{name = "json", param_type = "web::json::value"}}
    }
end
$$

namespace disccord
{
namespace models
{
%s
}
}

#endif /* _$$NAME$$_ */
